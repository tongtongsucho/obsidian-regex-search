/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => RegexSearchPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  defaultPattern: "",
  caseSensitive: false,
  multiline: false,
  maxResultsPerFile: 50,
  includeHiddenFiles: false,
  fileExtensions: ["md", "txt", "json", "js", "ts", "css", "html"]
};
var RegexSearchPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "open-regex-search",
      name: "\u6253\u5F00\u6B63\u5219\u8868\u8FBE\u5F0F\u641C\u7D22",
      callback: () => {
        new RegexSearchModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "regex-search-current-file",
      name: "\u5728\u5F53\u524D\u6587\u4EF6\u4E2D\u641C\u7D22",
      callback: () => {
        const activeFile = this.app.workspace.getActiveFile();
        if (activeFile) {
          new RegexSearchModal(this.app, this, activeFile).open();
        } else {
          new import_obsidian.Notice("\u6CA1\u6709\u6253\u5F00\u7684\u6587\u4EF6");
        }
      }
    });
    this.addSettingTab(new RegexSearchSettingTab(this.app, this));
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Regex Search");
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // 核心搜索方法
  async searchInFile(file, pattern, flags) {
    const content = await this.app.vault.read(file);
    const regex = new RegExp(pattern, flags);
    const matches = [];
    const lines = content.split("\n");
    for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {
      const line = lines[lineIndex];
      let match;
      regex.lastIndex = 0;
      while ((match = regex.exec(line)) !== null) {
        if (matches.length >= this.settings.maxResultsPerFile) {
          break;
        }
        const contextLines = [];
        if (lineIndex > 0)
          contextLines.push(lines[lineIndex - 1]);
        contextLines.push(line);
        if (lineIndex < lines.length - 1)
          contextLines.push(lines[lineIndex + 1]);
        matches.push({
          file,
          line: lineIndex + 1,
          column: match.index + 1,
          match: match[0],
          context: contextLines.join("\n")
        });
        if (!flags.includes("g")) {
          break;
        }
      }
      if (matches.length >= this.settings.maxResultsPerFile) {
        break;
      }
    }
    return {
      file,
      matches,
      totalMatches: matches.length
    };
  }
  // 跨文件搜索方法
  async searchInVault(pattern, flags) {
    const files = this.app.vault.getFiles();
    const results = [];
    for (const file of files) {
      const extension = file.extension;
      if (!this.settings.fileExtensions.includes(extension)) {
        continue;
      }
      if (!this.settings.includeHiddenFiles && file.name.startsWith(".")) {
        continue;
      }
      try {
        const result = await this.searchInFile(file, pattern, flags);
        if (result.matches.length > 0) {
          results.push(result);
        }
      } catch (error) {
        console.error(`\u641C\u7D22\u6587\u4EF6 ${file.path} \u65F6\u51FA\u9519:`, error);
      }
    }
    return results;
  }
  // 构建正则表达式标志
  buildRegexFlags() {
    let flags = "";
    if (!this.settings.caseSensitive)
      flags += "i";
    if (this.settings.multiline)
      flags += "m";
    flags += "g";
    return flags;
  }
};
var RegexSearchModal = class extends import_obsidian.Modal {
  constructor(app, plugin, currentFile) {
    super(app);
    this.searchResults = [];
    this.plugin = plugin;
    this.currentFile = currentFile || null;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: this.currentFile ? `\u5728 ${this.currentFile.name} \u4E2D\u641C\u7D22` : "\u6B63\u5219\u8868\u8FBE\u5F0F\u641C\u7D22" });
    const searchContainer = contentEl.createDiv({ cls: "regex-search-container" });
    const patternContainer = searchContainer.createDiv({ cls: "regex-pattern-container" });
    patternContainer.createEl("label", { text: "\u6B63\u5219\u8868\u8FBE\u5F0F\u6A21\u5F0F\uFF1A" });
    const patternInput = patternContainer.createEl("input", {
      type: "text",
      placeholder: "\u8F93\u5165\u6B63\u5219\u8868\u8FBE\u5F0F...",
      value: this.plugin.settings.defaultPattern
    });
    patternInput.focus();
    const optionsContainer = searchContainer.createDiv({ cls: "regex-options-container" });
    const caseSensitiveToggle = this.createToggle(optionsContainer, "\u533A\u5206\u5927\u5C0F\u5199", this.plugin.settings.caseSensitive);
    const multilineToggle = this.createToggle(optionsContainer, "\u591A\u884C\u6A21\u5F0F", this.plugin.settings.multiline);
    const buttonContainer = searchContainer.createDiv({ cls: "regex-button-container" });
    const searchButton = buttonContainer.createEl("button", { text: "\u641C\u7D22" });
    const clearButton = buttonContainer.createEl("button", { text: "\u6E05\u7A7A\u7ED3\u679C" });
    const resultsContainer = contentEl.createDiv({ cls: "regex-results-container" });
    const performSearch = async () => {
      const pattern = patternInput.value.trim();
      if (!pattern) {
        new import_obsidian.Notice("\u8BF7\u8F93\u5165\u6B63\u5219\u8868\u8FBE\u5F0F\u6A21\u5F0F");
        return;
      }
      try {
        let flags = "";
        if (!caseSensitiveToggle.checked)
          flags += "i";
        if (multilineToggle.checked)
          flags += "m";
        flags += "g";
        new RegExp(pattern, flags);
        resultsContainer.empty();
        resultsContainer.createEl("div", { text: "\u641C\u7D22\u4E2D...", cls: "regex-loading" });
        let results;
        if (this.currentFile) {
          const result = await this.plugin.searchInFile(this.currentFile, pattern, flags);
          results = result.matches.length > 0 ? [result] : [];
        } else {
          results = await this.plugin.searchInVault(pattern, flags);
        }
        this.displayResults(results, resultsContainer);
      } catch (error) {
        new import_obsidian.Notice("\u6B63\u5219\u8868\u8FBE\u5F0F\u8BED\u6CD5\u9519\u8BEF\uFF1A" + error.message);
      }
    };
    searchButton.addEventListener("click", performSearch);
    patternInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        performSearch();
      }
    });
    clearButton.addEventListener("click", () => {
      resultsContainer.empty();
      this.searchResults = [];
    });
    this.addStyles();
  }
  createToggle(container, label, defaultValue) {
    const toggleContainer = container.createDiv({ cls: "regex-toggle-container" });
    const checkbox = toggleContainer.createEl("input", { type: "checkbox" });
    checkbox.checked = defaultValue;
    toggleContainer.createEl("label", { text: label });
    return checkbox;
  }
  displayResults(results, container) {
    container.empty();
    if (results.length === 0) {
      container.createEl("div", { text: "\u672A\u627E\u5230\u5339\u914D\u9879", cls: "regex-no-results" });
      return;
    }
    const totalMatches = results.reduce((sum, result) => sum + result.totalMatches, 0);
    const statsEl = container.createEl("div", { cls: "regex-stats" });
    statsEl.createEl("span", { text: `\u627E\u5230 ${totalMatches} \u4E2A\u5339\u914D\u9879\uFF0C\u5206\u5E03\u5728 ${results.length} \u4E2A\u6587\u4EF6\u4E2D` });
    results.forEach((result) => {
      const fileContainer = container.createDiv({ cls: "regex-file-result" });
      const fileTitle = fileContainer.createEl("div", { cls: "regex-file-title" });
      fileTitle.createEl("strong", { text: result.file.name });
      fileTitle.createEl("span", { text: ` (${result.totalMatches} \u4E2A\u5339\u914D\u9879)` });
      const matchesContainer = fileContainer.createDiv({ cls: "regex-matches-container" });
      result.matches.forEach((match) => {
        const matchEl = matchesContainer.createDiv({ cls: "regex-match" });
        const locationEl = matchEl.createEl("div", { cls: "regex-match-location" });
        locationEl.createEl("span", { text: `\u7B2C ${match.line} \u884C` });
        const contentEl = matchEl.createEl("div", { cls: "regex-match-content" });
        const contextLines = match.context.split("\n");
        contextLines.forEach((line, lineIndex) => {
          const lineEl = contentEl.createEl("div", { cls: "regex-context-line" });
          if (lineIndex === Math.floor(contextLines.length / 2)) {
            lineEl.addClass("regex-match-line");
            const beforeMatch = line.substring(0, match.column - 1);
            const matchText = match.match;
            const afterMatch = line.substring(match.column - 1 + matchText.length);
            lineEl.createEl("span", { text: beforeMatch });
            lineEl.createEl("span", { text: matchText, cls: "regex-highlight" });
            lineEl.createEl("span", { text: afterMatch });
          } else {
            lineEl.createEl("span", { text: line });
          }
        });
        matchEl.addEventListener("click", async () => {
          matchEl.addClass("loading");
          this.close();
          const leaf = this.app.workspace.getLeaf();
          await leaf.openFile(result.file);
          setTimeout(() => {
            const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
            if (activeView && activeView.editor) {
              const editor = activeView.editor;
              const line = match.line - 1;
              const column = match.column - 1;
              editor.setCursor(line, column);
              editor.scrollIntoView({
                from: { line, ch: 0 },
                to: { line, ch: editor.getLine(line).length }
              }, true);
              this.highlightMatch(editor, match, result.file.path);
            }
          }, 100);
        });
      });
    });
    this.searchResults = results;
  }
  addStyles() {
    const style = document.createElement("style");
    style.textContent = `
			.regex-search-container {
				margin-bottom: 20px;
			}
			
			.regex-pattern-container {
				margin-bottom: 15px;
			}
			
			.regex-pattern-container label {
				display: block;
				margin-bottom: 5px;
				font-weight: bold;
			}
			
			.regex-pattern-container input {
				width: 100%;
				padding: 8px;
				border: 1px solid var(--background-modifier-border);
				border-radius: 4px;
				font-family: monospace;
			}
			
			.regex-options-container {
				display: flex;
				flex-wrap: wrap;
				gap: 15px;
				margin-bottom: 15px;
			}
			
			.regex-toggle-container {
				display: flex;
				align-items: center;
				gap: 5px;
			}
			
			.regex-button-container {
				display: flex;
				gap: 10px;
				margin-bottom: 20px;
			}
			
			.regex-button-container button {
				padding: 8px 16px;
				border: 1px solid var(--background-modifier-border);
				border-radius: 4px;
				background: var(--background-primary);
				color: var(--text-normal);
				cursor: pointer;
			}
			
			.regex-button-container button:hover {
				background: var(--background-modifier-hover);
			}
			
			.regex-results-container {
				max-height: 400px;
				overflow-y: auto;
				border: 1px solid var(--background-modifier-border);
				border-radius: 4px;
				padding: 10px;
			}
			
			.regex-loading {
				text-align: center;
				padding: 20px;
				color: var(--text-muted);
			}
			
			.regex-no-results {
				text-align: center;
				padding: 20px;
				color: var(--text-muted);
			}
			
			.regex-stats {
				margin-bottom: 15px;
				padding: 10px;
				background: var(--background-secondary);
				border-radius: 4px;
				font-weight: bold;
			}
			
			.regex-file-result {
				margin-bottom: 20px;
				border: 1px solid var(--background-modifier-border);
				border-radius: 4px;
				padding: 10px;
			}
			
			.regex-file-title {
				margin-bottom: 10px;
				padding-bottom: 5px;
				border-bottom: 1px solid var(--background-modifier-border);
			}
			
			.regex-match {
				margin-bottom: 15px;
				padding: 10px;
				background: var(--background-secondary);
				border-radius: 4px;
				cursor: pointer;
			}
			
			.regex-match:hover {
				background: var(--background-modifier-hover);
			}
			
			.regex-match-location {
				font-size: 0.9em;
				color: var(--text-muted);
				margin-bottom: 5px;
			}
			
			.regex-match-content {
				font-family: monospace;
				font-size: 0.9em;
			}
			
			.regex-context-line {
				margin: 2px 0;
			}
			
			.regex-match-line {
				font-weight: bold;
			}
			
			.regex-highlight {
				background: var(--text-highlight-bg);
				color: var(--text-on-accent);
				padding: 2px 4px;
				border-radius: 2px;
			}
		`;
    document.head.appendChild(style);
  }
  // 高亮匹配的文本
  highlightMatch(editor, match, filePath) {
    try {
      const line = match.line - 1;
      const column = match.column - 1;
      const matchLength = match.match.length;
      editor.setSelection(
        { line, ch: column },
        { line, ch: column + matchLength }
      );
      setTimeout(() => {
        try {
          editor.setCursor(line, column);
        } catch (error) {
        }
      }, 3e3);
    } catch (error) {
      console.error("\u9AD8\u4EAE\u5339\u914D\u6587\u672C\u65F6\u51FA\u9519:", error);
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var RegexSearchSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "\u6B63\u5219\u8868\u8FBE\u5F0F\u641C\u7D22\u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("\u9ED8\u8BA4\u641C\u7D22\u6A21\u5F0F").setDesc("\u6253\u5F00\u641C\u7D22\u65F6\u7684\u9ED8\u8BA4\u6B63\u5219\u8868\u8FBE\u5F0F\u6A21\u5F0F").addText((text) => text.setPlaceholder("\u8F93\u5165\u9ED8\u8BA4\u6B63\u5219\u8868\u8FBE\u5F0F...").setValue(this.plugin.settings.defaultPattern).onChange(async (value) => {
      this.plugin.settings.defaultPattern = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u533A\u5206\u5927\u5C0F\u5199").setDesc("\u9ED8\u8BA4\u542F\u7528\u533A\u5206\u5927\u5C0F\u5199\u641C\u7D22").addToggle((toggle) => toggle.setValue(this.plugin.settings.caseSensitive).onChange(async (value) => {
      this.plugin.settings.caseSensitive = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u591A\u884C\u6A21\u5F0F").setDesc("\u9ED8\u8BA4\u542F\u7528\u591A\u884C\u6A21\u5F0F\uFF08^ \u548C $ \u5339\u914D\u884C\u9996\u884C\u5C3E\uFF09").addToggle((toggle) => toggle.setValue(this.plugin.settings.multiline).onChange(async (value) => {
      this.plugin.settings.multiline = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u6BCF\u4E2A\u6587\u4EF6\u6700\u5927\u7ED3\u679C\u6570").setDesc("\u9650\u5236\u6BCF\u4E2A\u6587\u4EF6\u663E\u793A\u7684\u6700\u5927\u641C\u7D22\u7ED3\u679C\u6570\u91CF").addText((text) => text.setPlaceholder("50").setValue(this.plugin.settings.maxResultsPerFile.toString()).onChange(async (value) => {
      const num = parseInt(value);
      if (!isNaN(num) && num > 0) {
        this.plugin.settings.maxResultsPerFile = num;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian.Setting(containerEl).setName("\u5305\u542B\u9690\u85CF\u6587\u4EF6").setDesc("\u5728\u641C\u7D22\u4E2D\u5305\u542B\u9690\u85CF\u6587\u4EF6\uFF08\u4EE5 . \u5F00\u5934\u7684\u6587\u4EF6\uFF09").addToggle((toggle) => toggle.setValue(this.plugin.settings.includeHiddenFiles).onChange(async (value) => {
      this.plugin.settings.includeHiddenFiles = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u6587\u4EF6\u6269\u5C55\u540D").setDesc("\u8981\u641C\u7D22\u7684\u6587\u4EF6\u6269\u5C55\u540D\uFF08\u7528\u9017\u53F7\u5206\u9694\uFF09").addText((text) => text.setPlaceholder("md,txt,json,js,ts").setValue(this.plugin.settings.fileExtensions.join(",")).onChange(async (value) => {
      this.plugin.settings.fileExtensions = value.split(",").map((ext) => ext.trim());
      await this.plugin.saveSettings();
    }));
  }
};
