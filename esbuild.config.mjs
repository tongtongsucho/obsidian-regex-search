import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === 'production');

const config = {
	banner: {
		js: banner,
	},
	entryPoints: ['main.ts'],
	bundle: true,
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins
	],
	format: 'cjs',
	target: 'es2018',
	logLevel: "info",
	sourcemap: prod ? false : 'inline',
	treeShaking: true,
	minify: prod,
	keepNames: true,
	metafile: prod,
	outfile: 'main.js',
	define: {
		'process.env.NODE_ENV': JSON.stringify(prod ? 'production' : 'development'),
	},
	drop: prod ? ['console', 'debugger'] : [],
	legalComments: 'none',
	charset: 'utf8',
};

try {
	const context = await esbuild.context(config);

	if (prod) {
		console.log('üöÄ Building for production...');
		const result = await context.rebuild();
		
		if (result.metafile) {
			console.log('\nüìä Build Analysis:');
			const analysis = await esbuild.analyzeMetafile(result.metafile);
			console.log(analysis);
		}
		
		console.log('‚úÖ Production build completed successfully!');
		process.exit(0);
	} else {
		console.log('üîß Starting development build with watch mode...');
		await context.watch();
		console.log('üëÄ Watching for changes...');
	}
} catch (error) {
	console.error('‚ùå Build failed:', error);
	process.exit(1);
}
